remDr$switchToFrame(captcha)
captcha$click()
captcha$click()
captcha <- remDr$findElement(using='xpath', '//iframe[@title="reCAPTCHA"]')
remDr$switchToFrame(captcha)
captcha$click()
searchField <- remDr$findElement(using = 'id', 'formulario:textoLivre')
searchField$clickElement()
searchField$sendKeysToElement(list("dano moral previdenciário", key="enter"))
remDr$switchToFrame(NULL)
searchField <- remDr$findElement(using = 'id', 'formulario:textoLivre')
searchField$clickElement()
searchField$sendKeysToElement(list("dano moral previdenciário", key="enter"))
botao_next <- remDr$findElement(using = 'xpath', '//span[@class = "ui-icon ui-icon-seek-next"]')
botao_next$clickElement()
botao_next <- remDr$findElement(using = 'xpath', '//a[@class = "ui-paginator-next ui-state-default ui-corner-all"]')
botao_next$clickElement()
botao_next <- remDr$findElement(using = 'xpath', '//a[@class = "ui-paginator-next ui-state-default ui-corner-all"]')
###### O loop não está terminando ######
while (condicao == TRUE) {
tabelas_prep <- lapply(tabelas, function(x) {x$getPageSource()})
tabelas_html <- lapply(tabelas_prep %>% unlist(), read_html)
dfs <- lapply(tabelas_html, html_table)
index3 <- seq_len(length(dfs[[1]][10:length(dfs[[1]])])) %% 2
dfs <- dfs[[1]][10:length(dfs[[1]])]
dfs <- dfs[index3==1]
dfs <- lapply(dfs, tratar)
dfs <- bind_rows(dfs)
df_main <- bind_rows(df_main, dfs)
Sys.sleep(2)
tryCatch(
{
botao_next <- remDr$findElement(using = 'xpath', '//a[@class = "ui-paginator-next ui-state-default ui-corner-all"]')
botao_next$clickElement()
},
error = function(e) {
print('Script completado!')
condicao <<- FALSE
}
)
if (condicao == FALSE) {
break
}
}
###### O loop não está terminando ######
while (condicao == TRUE) {
tabelas_prep <- lapply(tabelas, function(x) {x$getPageSource()})
tabelas_html <- lapply(tabelas_prep %>% unlist(), read_html)
dfs <- lapply(tabelas_html, html_table)
index3 <- seq_len(length(dfs[[1]][10:length(dfs[[1]])])) %% 2
dfs <- dfs[[1]][10:length(dfs[[1]])] %>% dfs[index3==1] %>% lapply(dfs, tratar) %>% bind_rows(dfs)
df_main <- bind_rows(df_main, dfs)
Sys.sleep(2)
tryCatch(
{
botao_next <- remDr$findElement(using = 'xpath', '//a[@class = "ui-paginator-next ui-state-default ui-corner-all"]')
botao_next$clickElement()
},
error = function(e) {
print('Script completo!')
condicao <<- FALSE
}
)
if (condicao == FALSE) {
break
}
}
# Encerrando o browser e o servidor
remDr$close()
remDr$quit()
system("taskkill /im java.exe /f")
library('RSelenium')
library("rvest")
library('tidyverse')
tratar <- function(df) {
index <- seq_len(nrow(df)) %% 2
valores <- df[index==0,] %>% rename(X2 = X1)
chaves <- df[index==1,]
df_tratada <- tibble(chaves, valores) %>% pivot_wider(names_from = X1, values_from = X2)
return(df_tratada)
}
rs_driver_object <- rsDriver(
browser = 'firefox',
verbose = F,
port = 4444L
)
remDr <- rs_driver_object$client
remDr$open()
remDr$navigate('https://www2.cjf.jus.br/jurisprudencia/trf1/index.xhtml')
captcha <- remDr$findElement(using='xpath', '//iframe[@title="reCAPTCHA"]')
remDr$switchToFrame(captcha)
captcha$click()
remDr$switchToFrame(NULL)
searchField <- remDr$findElement(using = 'id', 'formulario:textoLivre')
searchField$clickElement()
searchField$sendKeysToElement(list("dano moral previdenciário", key="enter"))
# Extraindo as tabelas
tabelas <- remDr$findElements(using = 'xpath', '//table[@class="table_resultado"]')
#all_data <- list()
df_main <- tibble()
condicao = TRUE
###### O loop não está terminando ######
while (condicao == TRUE) {
tabelas_prep <- lapply(tabelas, function(x) {x$getPageSource()})
tabelas_html <- lapply(tabelas_prep %>% unlist(), read_html)
dfs <- lapply(tabelas_html, html_table)
index3 <- seq_len(length(dfs[[1]][10:length(dfs[[1]])])) %% 2
dfs <- dfs[[1]][10:length(dfs[[1]])] %>% dfs[index3==1] %>% lapply(dfs, tratar) %>% bind_rows(dfs)
df_main <- bind_rows(df_main, dfs)
Sys.sleep(.5)
tryCatch(
{
botao_next <- remDr$findElement(using = 'xpath', '//a[@class = "ui-paginator-next ui-state-default ui-corner-all"]')
botao_next$clickElement()
},
error = function(e) {
print('Script completo!')
condicao <<- FALSE
}
)
if (condicao == FALSE) {
break
}
}
while (condicao == TRUE) {
tabelas_prep <- lapply(tabelas, function(x) {x$getPageSource()})
tabelas_html <- lapply(tabelas_prep %>% unlist(), read_html)
dfs <- lapply(tabelas_html, html_table)
index3 <- seq_len(length(dfs[[1]][10:length(dfs[[1]])])) %% 2
dfs <- dfs[[1]][10:length(dfs[[1]])]
dfs <- dfs[index3==1]
dfs <- lapply(dfs, tratar)
dfs <- bind_rows(dfs)
df_main <- bind_rows(df_main, dfs)
Sys.sleep(2)
tryCatch(
{
botao_next <- remDr$findElement(using = 'xpath', '//a[@class = "ui-paginator-next ui-state-default ui-corner-all"]')
botao_next$clickElement()
},
error = function(e) {
print('Script finalizado!')
condicao <<- FALSE
}
)
if (condicao == FALSE) {
break
}
}
# Tratando os dados
## Modularizando através de uma função
write_csv(df_main,'df_main3.csv')
# Encerrando o browser e o servidor
remDr$close()
remDr$quit()
system("taskkill /im java.exe /f")
View(df_main)
length(df_main)
dim(df_main)
dim(distinct(df_main))
busca <- readline(prompt='Qual o termo de busca? ')
busca <- readline(prompt='Qual o termo de busca? \n')
busca <- readline(prompt='Digite o termo de busca: ')
busca
typeof(busca)
print(head(df_main))
colnames(df_main)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))head(df)
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y")) %>%
mutate(df_main, "Data da publicação" = as.Date("Data da publicação", format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
df <- mutate(df_main, "Data da publicação" = as.Date("Data da publicação", format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y")) %>%
mutate(df, "Data da Publicação" = as.Date("Data da Publicação", format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
head(df)
df <- mutate(df, "Data da Publicação" = as.Date("Data da Publicação", format = "%d/%m/%Y"))
head(df)
colnames(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
df <- mutate(df, "Data da publicação" = as.Date("Data da publicação", format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main as.Date(Data, format = "%d/%m/%Y"))
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%B/%d/%Y"))
head(df)
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
df <- mutate(df_main, Data = as.Date(Data, format = "%d/%m/%Y"))
head(df)
df <- mutate(df, df[["Data da publicação"]] = as.Date(df[["Data da publicação"]], format = "%d/%m/%Y"))
df2 <- mutate(df, "Data da publicação" = as.Date("Data da publicação", format = "%d/%m/%Y"))
head(df2)
df2 <- mutate(df, "Data da publicação" = as.Date("Data da publicação", format = "%d-%m-%Y"))
head(df2)
colnames(df_main)[8]
colnames(df_main)[8] <- data_da_publicacao
colnames(df_main)[8] <- 'data_da_publicacao'
colnames(df_main)[8]
df2 <- mutate(df, "Data da publicação" = as.Date("Data da publicação", format = "%d-%m-%Y"))
head(df2)
head(df_main)
View(df_main)
colnames(df_main)[8] <- "Data da publicação"
head(df_main)
head(df_main$`Data da publicação`)
df2 <- mutate(df_main$'Data da publicação' = str_replace_all(" ", ''))
head(df)
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df
df <- mutate(df, 'Data da publicação' = as.Date('Data da publicação', format='%d/%m/%Y'))
head(df)
View(df)
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
View(df)
sum(is.na(df$'Data da publicação'))
sum(is.na(df$'Relator convocado'))
unique(df$'Data da publicação')
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df <- mutate(df, 'Data da publicação' = as.Date('Data da publicação', format='%d/%m/%Y'))
head(df)
View(df)
sum(is.na(df$'Data da publicação'))
# Formatando as colunas de data
df <- mutate(df_main, 'Data da publicação' = as.Date('Data da publicação', format='%d/%m/%Y'))
head(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
head(df)
df$`Data da publicação` <- as.Date(df$`Data da publicação`)
head(df)
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
View(df)
unique(df$'Órgão Julgador')
unique(df$'Órgão julgador')
df$Número %>% strsplit(split = ' ')
library('RSelenium')
library("rvest")
library('tidyverse')
df$Número %>% strsplit(split = ' ')
df$'Número Formatado' <- strsplit(Número, split=' ')[[1]]
df$'Número Formatado' <- strsplit(df$Número, split=' ')[[1]]
df$Número
df$Número <- df$Número %>% strsplit(split = ' ')
df$Número
View(df)
df$'Número Formatação' <- df$Número[[1]]
df$'Número Formatação' <- df$Número[1]
View(df)
df$'Número Formatação' <- mutate(df$Número - df$número[[1]])
df$'Número Formatação' <- mutate(df$Número - df$Número[[1]])
df$'Número Formatação' <- mutate(df$Número = df$Número[[1]])
df$Número[[1]]
df$Número[1]
df$Número[[[1]]]
df$Número[[1]][1]
lapply(df$Número, function(x) x[1])
df$'Número Formatação' <- lapply(df$Número, function(x) x[1])
View(df)
df$Número <- lapply(df$Número, function(x) x[1])
View(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df <- mutate(df, 'Data da publicação' = as.Date('Data da publicação', format='%d/%m/%Y'))
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
df$Número %>% strsplit(split = ' ')
df$Número <- df$Número %>% strsplit(split = ' ')
df$Número <- lapply(df$Número, function(x) x[2])
df$'Número Formatação' <- lapply(df$Número, function(x) x[1])
View(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df <- mutate(df, 'Data da publicação' = as.Date('Data da publicação', format='%d/%m/%Y'))
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
df$Número %>% strsplit(split = ' ')
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1])
df$Número <- lapply(df$Número, function(x) x[2])
df$Número
df$`Número Formatação`
df$Número <- lapply(df$Número, function(x) as.character(x[2])
df$Número
head(df)
View(df)
head(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df <- mutate(df, 'Data da publicação' = as.Date('Data da publicação', format='%d/%m/%Y'))
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
df$Número %>% strsplit(split = ' ')
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1])
df$Número <- lapply(df$Número, function(x) x[2])
df$Número
df$`Número Formatação`
head(df)
df$Número <- lapply(df$Número, function(x) x[2]) %>% unlist()
df$Número
df$`Número Formatação`
head(df)
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
df$Número %>% strsplit(split = ' ')
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1])
df$Número <- lapply(df$Número, function(x) x[2])
df$Número
df$`Número Formatação`
head(df)
typeof(df$Número)
typeof(df$Classe)
typeof(df$'Número Formatação')
df$`Número Formatação` %>% as.character()
df$teste <- df$`Número Formatação` %>% as.character()
df$teste
View(df)
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
df$Número %>% strsplit(split = ' ')
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1]) %>% as.character()
df$Número <- lapply(df$Número, function(x) x[2]) %>% as.character()
df$Número
df$`Número Formatação`
head(df)
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`)
df$`Data da publicação` <- as.Date(df$`Data da publicação`, format='%d/%m/%Y')
head(df)
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1]) %>%
as.character()
df$Número <- lapply(df$Número, function(x) x[2]) %>%
as.character()
df$Número
df$`Número Formatação`
head(df)
View(df)
summary(df)
colnames(df)[14]
colnames(df)[17]
colnames(df)[14] <- "Relator para Acórdão"
colnames(df)[17] <- "Referência legislativa"
summary(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`) %>%
as.Date(format='%d/%m/%Y')
head(df)
unique((df$Classe))
colnames(df)
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`) %>%
as.Date(format='%d/%m/%Y')
head(df)
# Formatando a coluna de número do processo
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1]) %>%
as.character()
df$Número <- lapply(df$Número, function(x) x[2]) %>%
as.character()
df$Número
df$`Número Formatação`
# Formatando os nomes das colunas 14 e 17 (continham marcação \n e \t)
colnames(df)[14] <- "Relator para Acórdão"
colnames(df)[17] <- "Referência legislativa"
summary(df)
colnames(df)
unique(df$relator(a))
unique(df$'relator(a)')
unique(df$'Relator(a)')
unique(origem)
unique(df$Origem)
unique(df$'Órgão julgador')
summary(df)
# Transformando as colunas Classe e Órgão Julgador em factor
df$Classe %>% as.factor()
# Transformando as colunas Classe e Órgão Julgador em factor
typeof(df$Classe)
typeof(df$Classe %>% as.factor())
df$Classe <- as.factor(df$Classe)
typeof(df$Classe %>% as.factor())
typeof(df$`Órgão julgador`)
df$`Órgão julgador` <- as.factor(df$`Órgão julgador`)
typeof(df$`Órgão julgador`)
View(df)
View(df)
ordem_colunas <- c(1, 2, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
ordem_colunas <- c(1, 2, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)
df <- df[,ordem_colunas]
head(df)
View(df)
## Reorganizando as colunas
ordem_colunas <- c(1, 2, 20, 3:19)
df <- df[,ordem_colunas]
head(df)
# Formatando as colunas de data
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`) %>%
as.Date(format='%d/%m/%Y')
head(df)
# Formatando os nomes das colunas 14 e 17 (continham marcação \n e \t)
colnames(df)[14] <- "Relator para Acórdão"
colnames(df)[17] <- "Referência legislativa"
summary(df)
# Formatando a coluna de número do processo
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1]) %>%
as.character()
df$Número <- lapply(df$Número, function(x) x[2]) %>%
as.character()
# Transformando as colunas Classe e Órgão Julgador em factor
df$Classe <- as.factor(df$Classe)
df$`Órgão julgador` <- as.factor(df$`Órgão julgador`)
## Reorganizando as colunas
ordem_colunas <- c(1, 2, 20, 3:19)
df <- df[,ordem_colunas]
head(df)
# Selecionando as colunas de interesse
jurisprudencia <- select(df, -14:-20)
head(jurisprudencia)
# Selecionando as colunas de interesse
jurisprudencia <- select(df, -3, -14:-20)
head(jurisprudencia)
View(jurisprudencia)
write.csv('juris_data.csv')
write.csv(jurisprudencia, 'juris_data.csv')
df <- mutate(df_main, Data = as.Date(Data, format='%d/%m/%Y'))
df$`Data da publicação` <- gsub('\\s+', '', df$`Data da publicação`) %>%
as.Date(format='%d/%m/%Y')
head(df)
# Formatando os nomes das colunas 14 e 17 (continham marcação \n e \t)
colnames(df)[14] <- "Relator para Acórdão"
colnames(df)[17] <- "Referência legislativa"
summary(df)
# Formatando a coluna de número do processo
df$Número <- df$Número %>% strsplit(split = ' ')
df$'Número Formatação' <- lapply(df$Número, function(x) x[1]) %>%
as.character()
df$Número <- lapply(df$Número, function(x) x[2]) %>%
as.character()
# Transformando as colunas Classe e Órgão Julgador em factor
df$Classe <- as.factor(df$Classe)
df$`Órgão julgador` <- as.factor(df$`Órgão julgador`)
## Reorganizando as colunas
ordem_colunas <- c(1, 2, 20, 3:19)
df <- df[,ordem_colunas]
head(df)
# Selecionando as colunas de interesse
jurisprudencia <- select(df, -3, -14:-20)
head(jurisprudencia)
write.csv(jurisprudencia, 'juris_data.csv')
# Selecionando as colunas de interesse
jurisprudencia <- select(df, -3, -10, -14:-20)
head(jurisprudencia)
View(jurisprudencia)
unique(jurisprudencia$Decisão)
View(jurisprudencia)
nova_jurisprudencia <- filter(jurisprudencia, Data > 2021-01-01)
head(nova_jurisprudencia)
nova_jurisprudencia <- filter(jurisprudencia, Data > 2021-01-01)
head(nova_jurisprudencia)
filter(jurisprudencia, Data > 2021-01-01)
filter(jurisprudencia, Data > '2021-01-01')
filter(jurisprudencia, jurisprudencia$Data > '2021-01-01')
head(jurisprudencia)
jurisprudencia_recente <- jurisprudencia %>% filter(Data > '2022-01-01')
library('RSelenium')
library("rvest")
library('tidyverse')
jurisprudencia_recente <- jurisprudencia %>% filter(Data > '2022-01-01')
head(jurisprudencia_recente)
dim(jurisprudencia_recente)
View(jurisprudencia_recente)
head(jurisprudencia)
jurisprudencia_recente <- jurisprudencia %>% filter(Data >= '2022-01-01')
head(jurisprudencia_recente)
dim(jurisprudencia_recente)
jurisprudencia_recente <- jurisprudencia %>% filter(Data >= '2021-01-01')
head(jurisprudencia_recente)
dim(jurisprudencia_recente)
View(jurisprudencia_recente)
